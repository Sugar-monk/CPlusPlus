class Solution {
public:
    vector<string> generateParenthesis(int n)
{
	vector<int> buf;
	vector<vector<int> > tmp;

	//先放-1再放1，是因为全排列函数需要有序的序列。
	for (int i = 0; i < n; ++i)
		buf.push_back(-1);
	for (int i = 0; i < n; ++i)
		buf.push_back(1);

	while (next_permutation(buf.begin(), buf.end()))//如果已经将所有可能的排列完成，返回值为false
	{
		//要满足前n项和不小于0才可以保证括号是匹配的
		int sum = 0;
		for (const auto&e : buf)
		{
			sum += e;
			if (sum < 0)
				break;
		}
		if (sum >= 0)
			tmp.push_back(buf);
	}

	vector<string> ret;
	for (const auto &e : tmp)
	{
		string s;
		for (const auto & a : e)
		{
			if (a == -1)
				s.push_back(')');
			else
				s.push_back('(');
		}

		ret.push_back(s);
	}

	return ret;
}
};