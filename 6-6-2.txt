class MyQueue {
public:
    /** Initialize your data structure here. */
    MyQueue() {}
    
    /** Push element x to the back of queue. */
    void push(int x) {
        s1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    int pop() {
        int ret;
        if(s2.empty())
        {
            int size = s1.size();
            while(size)
            {
                s2.push(s1.top());
                s1.pop();
                size--;
            }
        }
        ret = s2.top();
        s2.pop();
        return ret;
    }
    
    /** Get the front element. */
    int peek() {
       
        if(s2.empty() && !s1.empty())
        {
            int size = s1.size();
            while(size)
            {
                s2.push(s1.top());
                s1.pop();
                size--;
            }
        }
         int ret = s2.top();
        return ret;
    }
    
    /** Returns whether the queue is empty. */
    bool empty() {
        return s1.empty()&&s2.empty(); 
    }
private:
    stack<int> s1;//负责入队列
    stack<int> s2;//负责出队列
    
};

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue* obj = new MyQueue();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->peek();
 * bool param_4 = obj->empty();
 */