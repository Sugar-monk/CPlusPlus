class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
		vector<vector<int> > ret;

		if (nums.size() < 3)
			return ret;

		sort(nums.begin(), nums.end());
		int left = 0, right = nums.size() - 1;
		if (nums[left] > 0 || nums[left] < 0 && nums[right] < 0)
			return ret;

		for (int i = 0; i < nums.size()-2;)
		{
			int tmp = 0;
			if (nums[i] > 0)
				break;
			left = i + 1;
			right = nums.size() - 1;
			while (left < right)
			{
				int sum = nums[i] + nums[left] + nums[right];
				if (sum < 0)
				{
					tmp = left;
					while (left < right && nums[++left] == nums[tmp])
					{}
				}
				else if (sum > 0)
				{
					tmp = right;
					while (right > left && nums[--right] == nums[tmp])
					{}
				}
				else
				{
                    tmp = left;
					vector<int> t{ nums[i], nums[left], nums[right] };
					ret.push_back(t);
					while (left < right && nums[++left] == nums[tmp])
					{}
				}
			}


			while (i < nums.size()-1)
			{
				tmp = i;
				if (nums[tmp] != nums[++i])
				{
					break;
				}
			}
		}

		return ret;
    }
};