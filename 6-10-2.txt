/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* BuyNode(int val)
    {
        ListNode* ret = (ListNode*)malloc(sizeof(ListNode));
        if (ret == nullptr)
        {
            assert(0);
            return nullptr;
        }
        ret->next = NULL;
        ret->val = val;

        return ret;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        if(l1 == NULL || l2 == NULL)
            return NULL;
        if(l1->val == 0 && l1->next == NULL)
            return l2;
        if(l2->val == 0 && l2->next == NULL)
            return l1;
        ListNode* pCur1 = l1;
        ListNode* pCur2 = l2;
        //取其中较长的链表作为返回值,哪个先结束就是另一个长，如果一样长，取第二个做返回链表
        while(pCur1 != NULL && pCur2 != NULL)
        {
            pCur1 = pCur1->next;
            pCur2 = pCur2->next;
        }
        ListNode* ret = NULL;
        if(pCur1 == NULL)
            ret = l2;
        else if(pCur2 == NULL)
            ret = l1;
        else
            ret = l2;
        
        int tmp = 0;
        pCur1 = l1;
        pCur2 = l2;
        ListNode* sum = ret;
        ListNode* sum_f = NULL;
        while(sum)
        {
            if (pCur1)
            {
                tmp += pCur1->val;
                pCur1 = pCur1->next;
            }
            if (pCur2)
            {
                tmp += pCur2->val;
                pCur2 = pCur2->next;
            }
            
            sum->val = tmp%10;
            sum_f = sum;
            sum = sum->next;
            tmp /=10;
        }
        
        if(tmp == 1)
        {
            sum_f->next = new ListNode(1);
        }
        
        return ret;
    }
};