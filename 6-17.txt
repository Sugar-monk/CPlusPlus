class Solution {
public:
    bool match(char* str, char* pattern)
    {
        //如果这两个地址是空的，直接返回false
        if(str == NULL || pattern == NULL)
            return false;
        
        //如果这个两个字符串同时结束，那么结果正确，返回true
        if(*str == '\0' && *pattern == '\0')
            return true;
        //如果字符串没有结束，而是模式先结束了，那么就说明不匹配
        else if(*str != '\0' && *pattern == '\0')
            return false;
        
        //如果下一个字符是*，说明这个字符有三种情况
        if(*(pattern+1) == '*')
        {
            //如果这两个字符相等或者模式中的字符为.，并且str字符串不为空，
            //可以让他匹配多个，也可以一个也不匹配
            if(*str == *pattern ||(*pattern == '.' && *str != '\0'))
                return match(str+1, pattern) || match(str, pattern+2);
            //否则直接让模式字符串跳过*字符，直接取*后面的字符进行比较
            else
                return match(str, pattern+2);
        }
        //如果模式中当前字符为.或者这两个字符相等，那么让这两个指针同时向后走一步，
        //进行下一步的比较。
        else if(*str == *pattern || (*pattern == '.' && *str != '\0'))
            return match(str+1, pattern+1);
        
        return false;
    }
   
};