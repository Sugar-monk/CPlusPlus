class Solution {
public:
        double IsEmpty(vector<int>& num)
        {
            double ret;
            size_t size = num.size();
            if(size == 1)
                return num[0];
            int med = size / 2;
            if (size% 2 == 0)
            {
                ret =  ((double)(num[med] + num[med - 1]) / 2);
            }
            else
                ret = num[med];
            
            return ret;
        }
   
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        double ret = -1;
        
        //定义最小数和最大数
        const int BDL_MIN_ = 0x80000000;
        const int BDL_MAX_ = 0x7fffffff;
    
        //如果这两个数组中有一个是空的，直接返回另一个的中位数即可
        if (nums1.empty())
            return IsEmpty(nums2);
        else if (nums2.empty())
            return IsEmpty(nums1);
    
        //使用分治思想，二分查找方法
        int size1 = nums1.size();	//数组一的长度
        int size2 = nums2.size();	//数组二的长度
        int size0 = size1 + size2;	//两个数组的总长度
    
        //为了效率，要选择最短的数组做二分查找，使数组一为最短
        //如果第一个数组比第二个数组长，就要使两个数组交换
        //但是swap的时间复杂度使O(N+M),所以将两个数组交换位置再调一次函数即可
        if (size1 > size2)
            return findMedianSortedArrays(nums2, nums1);
    
        //设置二分查找的范围
        int cutL = 0;
        int cutR = size1;
    
        //这里将cut1初始为数组1的中位数
        int cut1 = size1 - 1 / 2;
        while (cut1 <= size1)
        {
            cut1 = (cutR - cutL) / 2+cutL;
            int cut2 = (size0 / 2) - cut1;
            double L1 = (cut1 == 0) ? BDL_MIN_ : nums1[cut1-1];
            double R1 = (cut1 == size1) ? BDL_MAX_ : nums1[cut1];
            double L2 = (cut2 == 0) ? BDL_MIN_ : nums2[cut2-1];
            double R2 = (cut2 == size2) ? BDL_MAX_ : nums2[cut2];
    
            if (L1 > R2)
                //cut1左移
                cutR = cut1-1;
            else if (L2 > R1)
                //cur1右移
                cutL = cut1+1;
            else
            {
                if (size0 % 2 == 0)
                {
                    L1 = max(L1, L2);
                    R1 = min(R1, R2);
                    ret = (L1 + R1) / 2;
                    return ret;
                }
                else
                {
                    ret = min(R1, R2);
                    return ret;
                }
            }
        }
    
        return ret;
    }
};